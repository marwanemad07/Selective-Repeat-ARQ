//
// Generated file, do not edit! Created by opp_msgtool 6.0 from Message.msg.
//

#ifndef __MESSAGE_M_H
#define __MESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Message;
/**
 * Class generated from <tt>Message.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet Message
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int header;
 *     string paylaod;
 *     char trailer;
 *     int frameType;
 *     int ackNackNumber;
 * }
 * </pre>
 *
 * Message_Base is only useful if it gets subclassed, and Message is derived from it.
 * The minimum code to be written for Message is the following:
 *
 * <pre>
 * class Message : public Message_Base
 * {
 *   private:
 *     void copy(const Message& other) { ... }

 *   public:
 *     Message(const char *name=nullptr, short kind=0) : Message_Base(name,kind) {}
 *     Message(const Message& other) : Message_Base(other) {copy(other);}
 *     Message& operator=(const Message& other) {if (this==&other) return *this; Message_Base::operator=(other); copy(other); return *this;}
 *     virtual Message *dup() const override {return new Message(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Message_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Message)
 * </pre>
 */
class Message_Base : public ::omnetpp::cPacket
{
  protected:
    int header = 0;
    omnetpp::opp_string paylaod;
    char trailer = 0;
    int frameType = 0;
    int ackNackNumber = 0;

  private:
    void copy(const Message_Base& other);

  protected:
    bool operator==(const Message_Base&) = delete;
    // make constructors protected to avoid instantiation
    // make assignment operator protected to force the user override it
    Message_Base& operator=(const Message_Base& other);

  public:
    Message_Base(const char *name=nullptr, short kind=0);
    Message_Base(const Message_Base& other);
    virtual ~Message_Base();
    virtual Message_Base *dup() const override {
        return new Message_Base(*this);
    }
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getHeader() const;
    virtual void setHeader(int header);

    virtual const char * getPaylaod() const;
    virtual void setPaylaod(const char * paylaod);

    virtual char getTrailer() const;
    virtual void setTrailer(char trailer);

    virtual int getFrameType() const;
    virtual void setFrameType(int frameType);

    virtual int getAckNackNumber() const;
    virtual void setAckNackNumber(int ackNackNumber);
};


namespace omnetpp {

template<> inline Message_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<Message_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MESSAGE_M_H
